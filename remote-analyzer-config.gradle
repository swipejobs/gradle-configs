// Gradle Dependency Check Analyzer Configuration
// Remote configuration for OWASP Dependency Check plugin
// 
// Usage in your build.gradle:
// apply from: 'https://raw.githubusercontent.com/swipejobs/gradle-configs/main/remote-analyzer-config.gradle'

// Check if the OWASP Dependency Check plugin is applied
if (!project.plugins.hasPlugin('org.owasp.dependencycheck')) {
    logger.warn("OWASP Dependency Check plugin not found. Skipping analyzer configuration.")
    return
}

// Configuration helper function
def getProperty = { String key, def defaultValue ->
    return project.findProperty(key) ?: defaultValue
}

dependencyCheck {
    dependencyCheck {
        format = project.findProperty('dependencyCheck.format') ?: 'ALL'
        autoUpdate = project.findProperty('dependencyCheck.autoUpdate')?.toBoolean() ?: false

        data {
            connectionString = System.getenv('DEPENDENCY_CHECK_DB_URL') ?: 
                               project.findProperty('dependencyCheck.database.connectionString') ?: 
                               "jdbc:h2:file:./build/dependency-check-data/odc"
            username = System.getenv('DEPENDENCY_CHECK_DB_USER') ?: 
                       project.findProperty('dependencyCheck.database.username') ?: ""
            password = System.getenv('DEPENDENCY_CHECK_DB_PASSWORD') ?: 
                       project.findProperty('dependencyCheck.database.password') ?: ""
            driver = System.getenv('DEPENDENCY_CHECK_DB_DRIVER') ?: 
                     project.findProperty('dependencyCheck.database.driver') ?: 
                     "org.h2.Driver"
        }

        analyzers {
            assemblyEnabled = project.findProperty('analyzer.assembly.enabled')?.toBoolean() ?: false
            centralEnabled = project.findProperty('analyzer.central.enabled')?.toBoolean() ?: false
            ossIndex {
                enabled = project.findProperty('analyzer.ossIndex.enabled')?.toBoolean() ?: true
                warnOnlyOnRemoteErrors = project.findProperty('analyzer.ossIndex.warnOnlyOnRemoteErrors')?.toBoolean() ?: true
            }
            // retirejs { enabled = false }
            // nodeAudit { enabled = false }
        }
    }

    // apply exclusions
    def exclusions = System.getenv('GO_SERVER_URL') ? System.getenv('GO_SERVER_URL').toList().init().init().init().join() : 'https://gocd-internal.swipejobs.com'
    suppressionFiles = ["${exclusions}/dependencycheck/java-suppression.xml"]
}

// Log applied configuration for debugging
logger.info("Applied SwipeJobs dependency check configuration:")
logger.info("  - Format: ${dependencyCheck.format}")
logger.info("  - Assembly enabled: ${dependencyCheck.analyzers.assemblyEnabled}")
logger.info("  - Central enabled: ${dependencyCheck.analyzers.centralEnabled}")
logger.info("  - OSS Index enabled: ${dependencyCheck.analyzers.ossIndex.enabled}")
logger.info("  - Auto update: ${dependencyCheck.autoUpdate}")
if (dependencyCheck.suppressionFiles) {
    logger.info("  - Suppression files: ${dependencyCheck.suppressionFiles}")
}
